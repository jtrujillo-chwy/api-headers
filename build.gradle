buildscript {
  ext {
    defaultArgs = [
        'spring.profiles.active': 'test'
    ]

    kotlinVersion = '1.4.20'
    kotlinCoroutinesVersion = '1.4.1'
    kotlinReflectVersion = '1.4.20'
    ktlintVersion = '0.38.1'

    jacksonVersion = '2.10.1'
    okHttpVersion = '4.2.2'

    // Spring dependencies
    springBootVersion = '2.3.2.RELEASE'

    // Test dependencies
    kotestVersion = '4.3.0'
    junitVersion = '5.6.3'
    mockkVersion = '1.10.2'
    feignVersion = '2.2.6.RELEASE'
    mockServerVersion = '5.11.2'

    dockerComposeVersion = '0.10.6'
    dockerPath = '/usr/local/bin'
  }

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"

    // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:${dockerComposeVersion}"
  }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.avast.gradle.docker-compose'

version = '0.1.0'

jar {
  archiveFileName = 'api-headers'
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven { url "https://plugins.gradle.org/m2/" }
}

configurations {
  ktlint
}

dependencies {
  ktlint "com.pinterest:ktlint:${ktlintVersion}"

  // Kotlin dependencies
  compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}" // Required for Kotlin integration
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoroutinesVersion}"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:${kotlinCoroutinesVersion}"

  compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinReflectVersion}"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"

  // Http
  compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"

  // Spring
  compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
  compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
  compile "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

  // Test dependencies
  testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
  testCompile "io.kotest:kotest-assertions-core:${kotestVersion}"
  testCompile "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testCompile "io.mockk:mockk:${mockkVersion}"
  testCompile "org.mock-server:mockserver-netty:${mockServerVersion}"

  // Feign for testing
  testCompile "org.springframework.cloud:spring-cloud-starter-openfeign:${feignVersion}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "11"
  }
}

// Necessary for Kotest tests to run
tasks.withType(Test) { useJUnitPlatform() }


springBoot {
  buildInfo()
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "--verbose", "--reporter=json", "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/pinterest/ktlint#usage for more
}

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "-F", "src/**/*.kt"
}

// Run ktlint
check.dependsOn ktlint
